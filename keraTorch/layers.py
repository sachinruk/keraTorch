# AUTOGENERATED! DO NOT EDIT! File to edit: Layers.ipynb (unless otherwise specified).

__all__ = ['__inputDimError__', 'Dense']

# Cell
import torch.nn as nn
from fastai.vision import *

from .activations import *
from functools import partial

# Cell
class __inputDimError__(Exception):
    pass

# Cell
class Dense:
    def __init__(self, units, input_dim=None, activation=None,
                 use_bias=True, kernel_regularizer=None, bias_regularizer=None,
                 activity_regularizer=None):
        super().__init__()

        self.input_dim = input_dim
        self.activation = get_activation(activation) if activation else None
        if input_dim:
            self.linear = nn.Linear(input_dim, units, bias=use_bias)
        else:
            self.linear = partial(nn.Linear, out_features=units, bias=use_bias)
        # TODO: implement regularizers

    def get_layer(self, input_dim=None):
        if input_dim is None and self.input_dim is None:
            __inputDimError__("Need to specify number of input dimensions in first layer")
        elif input_dim:
            self.linear = self.linear(input_dim=input_dim)
        # else self.linear is already is assigned

        output_dim = self.linear.out_features
        layers = [layer for layer in [self.linear, self.activation] if layer]

        return {'output_dim': output_dim, 'layers': layers}